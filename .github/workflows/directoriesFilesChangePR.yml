name: 'Directories/Files Change Test PR'
on:
  pull_request:
    types: [ready_for_review]
    paths-ignore:
      - '.gitignore'
      - '*.md'
      - 'doc/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/*.yml'
jobs:
  getBuildLists:
    runs-on: ubuntu-latest
    outputs:
      buildLists: ${{ steps.locations_parse.outputs.build_lists }}
      buildEnv: ${{ steps.locations_parse.outputs.build_env}} 
      testDirsChanged: ${{ steps.locations_parse.outputs.test_dirs_changed}} 
    steps:
      - uses: actions/checkout@v2
      - uses: jitterbit/get-changed-files@v1
        id: get_change
        with:
          format: space-delimited
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: parse locations
        id: locations_parse
        run: |
          python3 ./.github/workflows/getBuildLists.py ${{ steps.get_change.outputs.all }}
  testChangeBasedBuildListWithHotspotAndOpenj9:
    runs-on: ${{ matrix.os }}
    needs: getBuildLists
    if: ${{!contains( fromJson(needs.getBuildLists.outputs.buildLists), 'skip')}}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-16.04, macos-10.15, windows-2016]
        version: [8, 15]
        build_list: ${{ fromJson(needs.getBuildLists.outputs.buildLists) }}
        impl: [hotspot, openj9]
    steps:
      - uses: actions/checkout@v2
      - uses: AdoptOpenJDK/install-jdk@v1
        with:
          version: ${{ matrix.version }}
          source: 'nightly'
          impl: ${{ matrix.impl }}
      - name: AQA
        uses: AdoptOpenJDK/run-aqa@v1
        with:
          build_list: ${{ matrix.build_list }}
          target: '_sanity.${{ matrix.build_list }}'
          jdksource: 'install-jdk'
          version: ${{ matrix.version }}
          openjdk_testRepo: '${{ github.event.pull_request.head.repo.full_name }}:${GITHUB_HEAD_REF}'
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: output_changed_based_build_list
          path: ./**/output_*/
  comment:
    runs-on: ubuntu-latest
    needs: getBuildLists
    steps:
      - uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            comment_body = `
              body: ${{ steps.workflow_run_info.outputs.id }}
              `;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'build listtt ${{ matrix.build_list }}'
            })
  triggerGrinderTests:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      test_targets_str: ${{ steps.format_test_targets_str.outputs.test_targets_str }}
    env:
        TARGET_LIST:  ${{ needs.getBuildLists.outputs.buildLists }}
    needs: getBuildLists
    if: ${{ needs.getBuildLists.outputs.buildEnv }}
    steps:
    - uses: actions/checkout@v2
    - name: format test targets str
      id: format_test_targets_str
      run: |
        python3 ./.github/workflows/createTestList.py ${{ needs.getBuildLists.outputs.buildLists }}
    - name: trigger default job
      uses: appleboy/jenkins-action@master
      if: ${{ needs.getBuildLists.outputs.testDirsChanged }}
      with:
        url: "https://ci.adoptopenjdk.net/"
        user: "xfxcwynlc"
        token: ${{ secrets.TOKEN }}
        job: "Grinder_Simple"
    - name: trigger single job
      uses: stigmelling/jenkins-action@master
      if: ${{ !needs.getBuildLists.outputs.testDirsChanged }}
      with:
        jenkinsUrl: 'https://ci.adoptopenjdk.net/'
        username: 'xfxcwynlc'
        token: ${{ secrets.TOKEN }}
        job: "Grinder_Simple"
        params: '{"TARGET": "${{ steps.format_test_targets_str.outputs.test_targets_str}}" }'

      
  
  

